package ToolsForTasks;

import java.io.*;
import java.util.*;

public class JobList {
	 static Scanner scanner = new Scanner(System.in);
	 static List<Job> jobList = new ArrayList<>();

	public static void addJob() throws JobException {
    System.out.println("Enter job name (or type \"Exit\"): ");
    String name = scanner.nextLine();
    if (name.equalsIgnoreCase("Exit")) return;

    System.out.println("Enter job description (or type \"Exit\"): ");
    String description = scanner.nextLine();
    if (description.equalsIgnoreCase("Exit")) return;

    Job job = new Job(name, description);

    // Add tools
    while (true) {
        System.out.println("Add a tool? (yes/no):");
        String response = scanner.nextLine().trim().toLowerCase();

        if (response.equals("no")) {
            break;
        } else if (response.equals("yes")) {
            while (true) {
                System.out.println("Tool name (or type \"Exit\" to stop adding tools):");
                String toolName = scanner.nextLine();
                if (toolName.equalsIgnoreCase("Exit")) break;

                int quantity = 0;
                while (true) {
                    System.out.println("Quantity (must be a number):");
                    String quantityStr = scanner.nextLine();
                    if (quantityStr.equalsIgnoreCase("Exit")) break;

                    try {
                        quantity = Integer.parseInt(quantityStr);
                        if (quantity < 1) throw new NumberFormatException(); // Enforce positive quantity
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println("\n***Invalid number. Please enter a valid positive number***\n");
                    }
                }

                job.addTool(new Tool(toolName, Integer.toString(quantity))); // Still storing as String if needed
            }
        } else {
            System.out.println("\n***Invalid input! Please enter \"yes\" or \"no\"***\n");
        }
    }

    // Add materials
    while (true) {
        System.out.println("Do you want to add a material? (yes/no): ");
        String response = scanner.nextLine().trim().toLowerCase();

        if (response.equals("no")) {
            break;
        } else if (response.equals("yes")) {
            while (true) {
                System.out.println("Material name (or type \"Exit\" to stop adding materials): ");
                String materialName = scanner.nextLine();
                if (materialName.equalsIgnoreCase("Exit")) break;

                int quantity = 0;
                while (true) {
                    System.out.println("Quantity (must be a number):");
                    String quantityStr = scanner.nextLine();
                    if (quantityStr.equalsIgnoreCase("Exit")) break;

                    try {
                        quantity = Integer.parseInt(quantityStr);
                        if (quantity < 1) throw new NumberFormatException();
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println("\n***Invalid number. Please enter a valid positive number***\n");
                    }
                }

                job.addMaterial(new Materials(materialName, Integer.toString(quantity))); // Again, as String if your model uses it that way
            }
        } else {
            System.out.println("\n***Invalid input! Please enter \"yes\" or \"no\"***\n");
        }
    }

		jobList.add(job);
		System.out.println("\n***Job added!***\n");
		saveToFile();
		System.out.println("\n***Job saved successfully!***\n");	
	}
	    public static void editJob() throws JobException {
	    	 listJobs();

	    	    if (jobList.isEmpty()) return;

	    	    System.out.print("Enter job number to edit: ");
	    	    int index = Integer.parseInt(scanner.nextLine());

	    	    if (index < 0 || index >= jobList.size()) {
	    	        System.out.println("Invalid job number.");
	    	        return;
	    	    }

	    	    Job job = jobList.get(index);

	    	    System.out.println("Editing Job: " + job.getName());

	    	    System.out.print("New name (or press Enter to keep): ");
	    	    String newName = scanner.nextLine();
	    	    if (!newName.isEmpty()) job.setName(newName);

	    	    System.out.print("New description (or press Enter to keep): ");
	    	    String newDesc = scanner.nextLine();
	    	    if (!newDesc.isEmpty()) job.setDescription(newDesc);

	    	    System.out.print("Do you want to edit tools? (yes/no): ");
	    	    String toolEdit = scanner.nextLine();
	    	    
	    	    if (toolEdit.equalsIgnoreCase("yes")) {
	    	        while (true) {
	    	            System.out.print("Do you want to add a tool, edit a tool or delete a tool? (Add/Edit/Delete/Exit): ");
	    	            String action = scanner.nextLine();

	    	            if (action.equalsIgnoreCase("Edit")) {
	    	                List<Tool> tools = job.getTools();

	    	                if (tools.isEmpty()) {
	    	                    System.out.println("No tools to edit.");
	    	                    continue;
	    	                }

	    	                System.out.println("Tools for this job:");
	    	                for (int i = 0; i < tools.size(); i++) {
	    	                    Tool tool = tools.get(i);
	    	                    System.out.println(i + ". Name: " + tool.getName() + " | Quantity: " + tool.getQuantity());
	    	                }

	    	                System.out.print("Enter the tool number to edit: ");
	    	                int toolNumber = Integer.parseInt(scanner.nextLine());

	    	                if (toolNumber < 0 || toolNumber >= tools.size()) {
	    	                    System.out.println("Invalid tool number.");
	    	                    continue;
	    	                }

	    	                Tool selectedTool = tools.get(toolNumber);

	    	                System.out.print("New tool name (or press Enter to keep): ");
	    	                String newToolName = scanner.nextLine();
	    	                if (!newToolName.isEmpty()) {
	    	                    selectedTool.setName(newToolName);
	    	                }

	    	                System.out.print("New quantity (or press Enter to keep): ");
	    	                String newQuantity = scanner.nextLine();
	    	                if (!newQuantity.isEmpty()) {
	    	                    selectedTool.setQuantity(newQuantity);
	    	                }

	    	                System.out.println("Tool updated.");

	    	            } else if (action.equalsIgnoreCase("Add")) {
	    	                System.out.print("Enter tool name: ");
	    	                String toolName = scanner.nextLine();

	    	                System.out.print("Enter quantity: ");
	    	                String quantity = scanner.nextLine();

	    	                job.addTool(new Tool(toolName, quantity));
	    	                System.out.println("Tool added.");
	    	            } else if (action.equalsIgnoreCase("Exit")) {
	    	                break;
	    	            } else {
	    	                System.out.println("Invalid input. Please enter Edit, Add, or Exit.");
	    	            }
	    	        }
	    	    }
	    	    
	    	    saveToFile();
	    	    System.out.println("Job updated.");
	    	}
	      
	    public static void deleteJob() throws JobException {
	        if (jobList.isEmpty()) {
	            throw new JobException("\n***There are no jobs to delete***\n");
	        }

	        listJobs(); // only show jobs if there are any

	        int index = -1;
	        while (true) {
	            System.out.print("Enter job number to delete: ");
	            String input = scanner.nextLine();
	            
	            if(input.equalsIgnoreCase("Exit")) {
	            	return;
	            }

	            try {
	                index = Integer.parseInt(input);

	                if (index < 0 || index >= jobList.size()) {
	                    System.out.println("\n***Invalid job number! Please enter a number between 0 and " + (jobList.size() - 1) + "***\n");
	                } else {
	                    break;
	                }
	            } catch (NumberFormatException e) {
	                System.out.println("\n***Invalid input! Please enter a valid number***\n");
	            }
	        }
	        while(true) {
		        System.out.println("\n***are you sure you want to delete this job:\n" + jobList.get(index) + "***\n");
		        String confirm= scanner.nextLine();
		        try {
		        if (confirm.equalsIgnoreCase("yes")) {
		        	Job removed = jobList.remove(index);
		        	System.out.println("Deleted: " + removed.getName());
		        	saveToFile();
		        	return;
		        } else if (confirm.equalsIgnoreCase("no")) {
		        	System.out.println("\n***Deletion cancelled***\n");
		        	return;
		        }
		        else {
		        	System.out.println("\n***Invalid input enter \"yes\" or \"no\"***\n");
		        }
		        
		        } catch (NumberFormatException e) {
		        	System.out.println("\n***Invalid input enter \\\"yes\\\" or \\\"no\\\"***\n");
		        }
	        }
	    }

	    	    
	    public static void searchJob() throws JobException {
	    	if (jobList.isEmpty()) {
	            throw new JobException("\n***No jobs to search***\n");
	        }

	        System.out.println("\nEnter any keyword to search (job name, description, or tool name):");
	        String term = scanner.nextLine().toLowerCase();

	        boolean found = false;

	        System.out.println("\nSearch Results:");
	        for (int i = 0; i < jobList.size(); i++) {
	            Job job = jobList.get(i);
	            String jobName = job.getName().toLowerCase();
	            String description = job.getDescription().toLowerCase();
	            StringBuilder toolNames = new StringBuilder();

	            for (Tool tool : job.getTools()) {
	                toolNames.append(tool.getName().toLowerCase()).append(" ");
	            }

	            // Match against all three fields
	            if (jobName.contains(term) || description.contains(term) || toolNames.toString().contains(term)) {
	                System.out.println(i + ". " + job);
	                found = true;
	            }
	        }

	        if (!found) {
	            System.out.println("\n***No jobs found matching \"" + term + "\"***\n");
	        }
	    	
	    }
	    
	    public static void loadFromFile() {
	        jobList.clear();

	        try (BufferedReader br = new BufferedReader(new FileReader("jobs.csv"))) {
	            String line;
	            while ((line = br.readLine()) != null) {
	                String[] parts = line.split(",", 4); // name, description, tools, materials

	                if (parts.length < 4) continue;

	                Job job = new Job(parts[0], parts[1]);

	                // Tools
	                String[] toolData = parts[2].split("\\|");
	                for (String toolEntry : toolData) {
	                    String[] toolParts = toolEntry.split(":");
	                    if (toolParts.length == 2) {
	                        job.addTool(new Tool(toolParts[0], toolParts[1]));
	                    }
	                }

	                // Materials
	                String[] materialData = parts[3].split("\\|");
	                for (String materialEntry : materialData) {
	                    String[] materialParts = materialEntry.split(":");
	                    if (materialParts.length == 2) {
	                        job.addMaterial(new Materials(materialParts[0], materialParts[1]));
	                    }
	                }

	                jobList.add(job);
	            }

	            System.out.println("\n***Jobs loaded from file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error loading file: " + e.getMessage() + "***\n");
	        }
	    }

	    
	    public static void listJobs() throws JobException {
			  if (jobList.isEmpty()) {
			        throw new JobException("\n***No jobs found***\n");
			    }

			    for (int i = 0; i < jobList.size(); i++) {
			        System.out.println("\nJOB # " + i + "\n" + jobList.get(i));
			    }
	    }

	    public static void saveToFile() {
	        try (FileWriter writer = new FileWriter("jobs.csv")) {
	            for (Job job : jobList) {
	                StringBuilder line = new StringBuilder();
	                line.append(job.getName()).append(",");
	                line.append(job.getDescription()).append(",");

	                // Tools
	                List<Tool> tools = job.getTools();
	                for (int i = 0; i < tools.size(); i++) {
	                    Tool tool = tools.get(i);
	                    line.append(tool.getName()).append(":").append(tool.getQuantity());
	                    if (i < tools.size() - 1) {
	                        line.append("|");
	                    }
	                }

	                line.append(","); // this comma separates tools from materials

	                // Materials
	                List<Materials> materials = job.getMaterials();
	                for (int i = 0; i < materials.size(); i++) {
	                    Materials material = materials.get(i);
	                    line.append(material.getName()).append(":").append(material.getQuantity());
	                    if (i < materials.size() - 1) {
	                        line.append("|");
	                    }
	                }

	                writer.write(line.toString() + "\n");
	            }

	            System.out.println("\n***Jobs saved to file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error saving file: " + e.getMessage() + "***\n");
	        }
	    }
}