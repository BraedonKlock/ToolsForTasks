package ToolsForTasks;
import java.io.*;
import java.util.*;

public class ToolList {
	static ArrayList<Tool> ToolList = new ArrayList<>();
	static Scanner scanner = new Scanner(System.in);
	private final int NUMCOLS = 2;
	
	public static void addTool() {
		System.out.println("What is the name of the tool?: ");
		String name = scanner.nextLine();
		System.out.println("Enter Quantity: ");
		Long quantity = Long.parseLong(scanner.nextLine());
		Tool tool = new Tool(name, quantity);
		ToolList.add(tool);
		saveToolList();
	}
	public static void editTool() {
		
	}
	
	public static void deleteTool() {
		
	}
	
	public static void searchTool() {
		
	}
	
	public static void listTool() {
	}
	
	public static void saveToolList() 
	{

		    Scanner scanner = new Scanner(System.in);

		    // asking the user to enter the filename
		   
		    String fileName = "tools.csv";

		    try (FileWriter writer = new FileWriter(fileName)) {
		        //writting the header of the CSV file
		        writer.append("NAME, QUANTITY\n");

		        // Writing the book details to the CSV file
		        for (Tool tool : ToolList) {
		            writer.append(tool.getName()).append(",");
		            writer.append(String.valueOf(tool.getQuantity())).append(",\n");
		        }

		        System.out.println("\n***ToolList saved successfully" + fileName + "***\n");
		    } catch (IOException e) {
		        System.out.println("Error saving the book list: " + e.getMessage());
		    }
		}

	
	// Method to parse each line into fields
    public String[] parseLine(String line) 
    {
        String[] fields = new String[NUMCOLS];
        int index = 0;
        String field = "";
        boolean inQuotes = false;
        
        for (int i = 0; i < line.length(); ++i) {
            char ch = line.charAt(i);

            // Handle quotes
            if (ch == '"') {
                inQuotes = !inQuotes; // Toggle inQuotes flag
            }
            // Handle commas (outside of quotes)
            else if (ch == ',' && !inQuotes) {
                fields[index] = field.trim();
                field = "";  // Reset the field
                index++;
            }
            // Add character to field if not comma
            else {
                field += ch;
            }
        }
        
        // Add the last field (after the loop)
        fields[index] = field.trim();
        return fields;
    }
}
