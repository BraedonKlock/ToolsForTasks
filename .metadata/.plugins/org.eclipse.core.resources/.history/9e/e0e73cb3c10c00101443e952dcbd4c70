package ToolsForTasks;

import java.io.*;
import java.util.*;

/*
* The JobList class is the manager for all job-related operations in the ToolsForTasks program.
* It contains an arrayList of Jobs and each Job can contain an arrayList of Tools and Materials.
* 
* This class allows users to:
* - Add, edit, delete, list, and search for jobs
* 
* - it also manages each job's associated tools and materials including:
* 	adding, editing, and deleting individual tool's and material's attributes from a Job object
* 
* - also allows users to save and load job data from a CSV file ("jobs.csv")
* 
* Each job contains a name, description, a list of tools (name + quantity), and a list of materials (name + quantity).
*/

public class JobList {
	 static Scanner scanner = new Scanner(System.in);
	 
	 // ArrayList that holds 
	 static List<Job> jobList = new ArrayList<>();
	 
	 // Add jobs and associated tools and materials
	public static void addJob() throws JobException {
    System.out.println("Enter job name (or type \"Exit\"): ");
    String name = scanner.nextLine();
    if (name.equalsIgnoreCase("Exit")) return;

    System.out.println("Enter job description (or type \"Exit\"): ");
    String description = scanner.nextLine();
    if (description.equalsIgnoreCase("Exit")) return;

    Job job = new Job(name, description);

    // Add tools
    while (true) {
        System.out.println("Add a tool? (yes/no):");
        String response = scanner.nextLine().trim().toLowerCase();

        if (response.equals("no")) {
            break;
        } else if (response.equals("yes")) {
            while (true) {
                System.out.println("Tool name (or type \"Exit\" to stop adding tools):");
                String toolName = scanner.nextLine();
                if (toolName.equalsIgnoreCase("Exit")) break;

                int quantity = 0;
                while (true) {
                    System.out.println("Quantity (must be a number):");
                    String quantityStr = scanner.nextLine();
                    if (quantityStr.equalsIgnoreCase("Exit")) break;

                    try {
                        quantity = Integer.parseInt(quantityStr);
                        if (quantity < 1) throw new NumberFormatException(); // Enforce positive quantity
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println("\n***Invalid number. Please enter a valid positive number***\n");
                    }
                }

                job.addTool(new Tool(toolName, Integer.toString(quantity)));
            }
        } else {
            System.out.println("\n***Invalid input! Please enter \"yes\" or \"no\"***\n");
        }
    }

    // Add materials
    while (true) {
        System.out.println("Do you want to add a material? (yes/no): ");
        String response = scanner.nextLine().trim().toLowerCase();

        if (response.equals("no")) {
            break;
        } else if (response.equals("yes")) {
            while (true) {
                System.out.println("Material name (or type \"Exit\" to stop adding materials): ");
                String materialName = scanner.nextLine();
                if (materialName.equalsIgnoreCase("Exit")) break;

                int quantity = 0;
                while (true) {
                    System.out.println("Quantity (must be a number):");
                    String quantityStr = scanner.nextLine();
                    if (quantityStr.equalsIgnoreCase("Exit")) break;

                    try {
                        quantity = Integer.parseInt(quantityStr);
                        if (quantity < 1) throw new NumberFormatException();
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println("\n***Invalid number. Please enter a valid positive number***\n");
                    }
                }

                job.addMaterial(new Materials(materialName, Integer.toString(quantity)));
            }
        } else {
            System.out.println("\n***Invalid input! Please enter \"yes\" or \"no\"***\n");
        }
    }
		jobList.add(job);
		System.out.println("\n***Job added!***\n");
		saveToFile();
		System.out.println("\n***Job saved successfully!***\n");	
	}
	
	// Editing Job attributes and associated tools and materials
	public static void editJob() throws JobException {
	    if (jobList.isEmpty()) {
	        throw new JobException("\n***There are no jobs to edit***\n");
	    }

	    listJobs();
	    
	    //Finding job
	    int index;
	    while (true) {
	        try {
	            System.out.print("Enter job number to edit: ");
	            index = Integer.parseInt(scanner.nextLine());

	            if (index < 0 || index >= jobList.size()) {
	                System.out.println("\n***Invalid input! Enter a number between 0 and " + (jobList.size() - 1) + "***\n");// input must be within JobList size
	            } else {
	                break;
	            }
	        } catch (NumberFormatException e) {
	            System.out.println("\n***Invalid input! Please enter a valid number***\n"); //catches letters
	        }
	    }
	    
	    //gets the job number the user inputed
	    Job job = jobList.get(index);
	    System.out.println("\nEditing Job: " + job.getName());
	    
	    // Editing Job name
	    System.out.print("New name (or press Enter to keep): ");
	    String newName = scanner.nextLine();
	    if (!newName.isEmpty()) job.setName(newName);
	    
	    // Editing Job description(notes)
	    System.out.print("\nNew description (or press Enter to keep): ");
	    String newDesc = scanner.nextLine();
	    if (!newDesc.isEmpty()) job.setDescription(newDesc);
	    
	    //while loop to control user input on whether they want to edit tools
	    while (true) {
	        System.out.print("\nDo you want to edit tools? (yes/no): ");
	        String toolEdit = scanner.nextLine();

	        if (toolEdit.equalsIgnoreCase("no")) break;

	        if (toolEdit.equalsIgnoreCase("yes")) {
	        	
	        	// While loop to control user input. gives user ability to stay in the "add, edit, or delete tool" loop
	            while (true) {
	                System.out.print("\nDo you want to Add, Edit, or Delete a tool? (Add/Edit/Delete/Exit): ");
	                String action = scanner.nextLine();

	                if (action.equalsIgnoreCase("Exit")) break;

	                if (action.equalsIgnoreCase("Edit")) {
	                    List<Tool> tools = job.getTools();

	                    if (tools.isEmpty()) {
	                        System.out.println("\n***There are no tools to edit***\n");
	                        continue;
	                    }
	                    
	                    // Lists Tools for users chosen job
	                    System.out.println("\n***Tools for this job***");
	                    for (int i = 0; i < tools.size(); i++) {
	                        Tool tool = tools.get(i);
	                        System.out.println(i + ". Name: " + tool.getName() + " | Quantity: " + tool.getQuantity());
	                    }
	                    
	                    // This while loop controls the input of the user
	                    int toolNumber;
	                    while (true) {
	                        try {
	                            System.out.print("\nEnter the tool number to edit: ");
	                            toolNumber = Integer.parseInt(scanner.nextLine());

	                            if (toolNumber < 0 || toolNumber >= tools.size()) {
	                                System.out.println("\n***Invalid tool number! Try again***\n");
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number***\n");
	                        }
	                    }
	                    
	                    // Getting users chosen tool
	                    Tool selectedTool = tools.get(toolNumber);
	                    
	                    // Editing tool name
	                    System.out.print("\nNew tool name (or press Enter to keep): ");
	                    String newToolName = scanner.nextLine();
	                    if (!newToolName.isEmpty()) {
	                        selectedTool.setName(newToolName);
	                    }
	                    
	                    // Editing tool quantity
	                    System.out.print("\nNew quantity (or press Enter to keep): ");
	                    String newQuantityStr = scanner.nextLine();
	                    if (!newQuantityStr.isEmpty()) {
	                        try {
	                            int newQuantity = Integer.parseInt(newQuantityStr);
	                            if (newQuantity < 1) {
	                                System.out.println("\n***Quantity must be positive***\n");// Quantity must be positive
	                            } else {
	                            	selectedTool.setQuantity(Integer.toString(newQuantity));
	                                System.out.println("\n***Tool updated***\n");
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Invalid number. Quantity not updated***\n"); // Catches Letters
	                        }
	                    }
	                    
	                    //Adding tool to users chosen Job
	                } else if (action.equalsIgnoreCase("Add")) {
	                    System.out.print("\nTool name (or type 'Exit' to cancel): ");
	                    String toolName = scanner.nextLine();
	                    if (toolName.equalsIgnoreCase("Exit")) continue;

	                    int quantity = 0;
	                    while (true) {
	                        System.out.print("\nQuantity (must be a number): ");
	                        String quantityStr = scanner.nextLine();

	                        try {
	                            quantity = Integer.parseInt(quantityStr);
	                            if (quantity < 1) throw new NumberFormatException();// Quantity must be greater than 0
	                            break;
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Invalid number. Please enter a valid positive number***\n"); // Catches letters
	                        }
	                    }
	                    
	                   // Adding new tool to users chosen job 
	                    job.addTool(new Tool(toolName, Integer.toString(quantity)));
	                    System.out.println("\n***Tool added***\n");
	                } else if (action.equalsIgnoreCase("Delete")) {
	                    List<Tool> tools = job.getTools();

	                    if (tools.isEmpty()) {
	                        System.out.println("\n***There are no tools to delete***\n");
	                        continue;
	                    }

	                    for (int i = 0; i < tools.size(); i++) {
	                        System.out.println(i + ". " + tools.get(i).getName() + " | Quantity: " + tools.get(i).getQuantity());
	                    }
	                    
	                    // Deleting tool
	                    int deleteIndex;
	                    while (true) {
	                        System.out.print("\nEnter the tool number to delete: ");
	                        try {
	                            deleteIndex = Integer.parseInt(scanner.nextLine());
	                            if (deleteIndex < 0 || deleteIndex >= tools.size()) { //Users input must be within tool.size
	                                System.out.println("\n***Invalid tool number***\n");
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number***\n");
	                        }
	                    }
	                    
	                    // Removing tool from tools array
	                    Tool removedTool = tools.remove(deleteIndex);
	                    System.out.println("\nDeleted tool: " + removedTool.getName());
	                } else {
	                    System.out.println("\n***Invalid input. Please enter Add, Edit, Delete, or Exit***\n");
	                }
	            }
	        } else {
	            System.out.println("\n***Invalid input! Please enter 'yes' or 'no'***\n");
	        }
	    }
	    
	    // Editing materials. while loop controls users input
	    while (true) {
	        System.out.print("Do you want to edit materials? (yes/no): ");
	        String matEdit = scanner.nextLine();

	        if (matEdit.equalsIgnoreCase("no")) break;
	        
	        // While loop controls flow allowing user to stay in the "add, edit, or delete" loop
	        if (matEdit.equalsIgnoreCase("yes")) {
	            while (true) {
	                System.out.print("Do you want to Add, Edit, or Delete a material? (Add/Edit/Delete/Exit): ");
	                String action = scanner.nextLine();

	                if (action.equalsIgnoreCase("Exit")) break; // Exiting if user types 'exit'

	                if (action.equalsIgnoreCase("Edit")) {
	                    List<Materials> materials = job.getMaterials();

	                    if (materials.isEmpty()) {
	                        System.out.println("\n***There are no materials to edit***\n");
	                        continue;
	                    }
	                    
	                    // Listing job materials
	                    System.out.println("\nMaterials for this job:");
	                    for (int i = 0; i < materials.size(); i++) {
	                        Materials m = materials.get(i);
	                        System.out.println(i + ". Name: " + m.getName() + " | Quantity: " + m.getQuantity());
	                    }
	                    
	                    // While loop to control user input
	                    int matNumber;
	                    while (true) {
	                        try {
	                            System.out.print("\nEnter the material number to edit: ");
	                            matNumber = Integer.parseInt(scanner.nextLine());

	                            if (matNumber < 0 || matNumber >= materials.size()) {
	                                System.out.println("\n***Invalid material number***\n"); // Users input must be within material size
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number***\n"); // Catching letters
	                        }
	                    }
	                    
	                    // Getting materials
	                    Materials selectedMat = materials.get(matNumber);

	                    System.out.print("\nNew material name (or press Enter to keep): "); // Editing material name
	                    String newMatName = scanner.nextLine();
	                    if (!newMatName.isEmpty()) {
	                        selectedMat.setName(newMatName);
	                    }

	                    System.out.print("\nNew quantity (or press Enter to keep): "); // Editing material quantity
	                    String newMatQtyStr = scanner.nextLine();
	                    if (!newMatQtyStr.isEmpty()) {
	                        selectedMat.setQuantity(newMatQtyStr);
	                        System.out.println("\n***Material updated***\n");
	                    }
	                    
	                    // Adding material to users chosen job
	                } else if (action.equalsIgnoreCase("Add")) {
	                    System.out.print("\nMaterial name (or type 'Exit' to cancel): "); // Editing name
	                    String matName = scanner.nextLine();
	                    if (matName.equalsIgnoreCase("Exit")) continue;

	                    System.out.print("\nQuantity (Doesn't have to be a number - e.g., 'feet'): "); // Editing quantity
	                    String quantityStr = scanner.nextLine();
	                    if (quantityStr.isEmpty()) {
	                        System.out.println("\n***Quantity cannot be empty. Material not added***\n"); // Quantity cannot be empty
	                        continue;
	                    }
	                    
	                    // Adding material to the users chosen job
	                    job.addMaterial(new Materials(matName, quantityStr));
	                    System.out.println("\n***Material added***\n");
	                    
	                    // Deleting materials
	                } else if (action.equalsIgnoreCase("Delete")) {
	                    List<Materials> materials = job.getMaterials();

	                    if (materials.isEmpty()) {
	                        System.out.println("\n***There are no materials to delete***\n"); // Handling empty material list
	                        continue;
	                    }
	                    
	                    // Showing material list
	                    for (int i = 0; i < materials.size(); i++) {
	                        Materials m = materials.get(i);
	                        System.out.println(i + ". " + m.getName() + " | Quantity: " + m.getQuantity());
	                    }
	                    
	                    // While loop controls user input 
	                    int deleteIndex;
	                    while (true) {
	                        System.out.print("\nEnter the material number to delete: "); 
	                        try {
	                            deleteIndex = Integer.parseInt(scanner.nextLine());
	                            if (deleteIndex < 0 || deleteIndex >= materials.size()) { // Users input must be within material size
	                                System.out.println("\n***Invalid material number***\n");
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number.***\n"); // Handles input of letters
	                        }
	                    }
	                    
	                    // Removing users chosen material
	                    Materials removed = materials.remove(deleteIndex);
	                    System.out.println("\nDeleted material: " + removed.getName());
	                } else {
	                    System.out.println("\n***Invalid input. Please enter Add, Edit, Delete, or Exit***\n");
	                }
	            }
	        } else {
	            System.out.println("\n***Invalid input! Please enter 'yes' or 'no'***\n");
	        }
	    }
	    saveToFile();
	    System.out.println("\n***Job updated successfully***\n");
	}
	
		// Delete job method
	    public static void deleteJob() throws JobException {
	        if (jobList.isEmpty()) {
	            throw new JobException("\n***There are no jobs to delete***\n"); // Handles empty jobList
	        }

	        listJobs(); 

	        int index = -1; // index initialized to a negative number for safe handling
	        
	        // While loop controls flow
	        while (true) {
	            System.out.print("Enter job number to delete: ");
	            String input = scanner.nextLine();
	            
	            if(input.equalsIgnoreCase("Exit")) {
	            	return;
	            }

	            try {
	                index = Integer.parseInt(input);

	                if (index < 0 || index >= jobList.size()) {
	                    System.out.println("\n***Invalid job number! Please enter a number between 0 and " + (jobList.size() - 1) + "***\n"); // Users input must be within jobList size
	                } else {
	                    break;
	                }
	            } catch (NumberFormatException e) {
	                System.out.println("\n***Invalid input! Please enter a valid number***\n");// Catches the input of letters
	            }
	        }
	        
	        // Confirm deletion. While loop controls user input
	        while(true) {
		        System.out.println("\n***are you sure you want to delete this job:\n" + jobList.get(index) + "***\n");
		        String confirm= scanner.nextLine();
		        try {
		        if (confirm.equalsIgnoreCase("yes")) {
		        	Job removed = jobList.remove(index);
		        	System.out.println("Deleted: " + removed.getName());
		        	saveToFile();
		        	return;
		        } else if (confirm.equalsIgnoreCase("no")) {
		        	System.out.println("\n***Deletion cancelled***\n");
		        	return;
		        }
		        else {
		        	System.out.println("\n***Invalid input enter \"yes\" or \"no\"***\n");
		        }
		        
		        } catch (NumberFormatException e) {
		        	System.out.println("\n***Invalid input enter \\\"yes\\\" or \\\"no\\\"***\n");
		        }
	        }
	    }
	    
	    // Search job method
	    public static void searchJob() throws JobException {
	    	if (jobList.isEmpty()) {
	            throw new JobException("\n***No jobs to search***\n"); // handling empty jobList
	        }

	        System.out.println("\nEnter any keyword to search (job name, description, or tool name):");
	        String term = scanner.nextLine().toLowerCase();

	        // using a boolean value to control flow.
	        boolean found = false;

	        System.out.println("\nSearch Results:");
	        for (int i = 0; i < jobList.size(); i++) {
	            Job job = jobList.get(i);
	            String jobName = job.getName().toLowerCase();
	            String description = job.getDescription().toLowerCase();
	            StringBuilder toolNames = new StringBuilder();

	            for (Tool tool : job.getTools()) {
	                toolNames.append(tool.getName().toLowerCase()).append(" ");
	            }

	            // Match user input against all three fields job name, description, and tools
	            if (jobName.contains(term) || description.contains(term) || toolNames.toString().contains(term)) {
	                System.out.println(i + ". " + job);
	                found = true; // found set to true so that the next if statement doesn't execute
	            }
	        }

	        if (!found) {
	            System.out.println("\n***No jobs found matching \"" + term + "\"***\n");
	        }
	    	
	    }
	    
	    // This method Loads data from the 'jobs.csv' file
	    public static void loadFromFile() {
	        jobList.clear(); // Clearing existing jobs before loading new one

	        try (BufferedReader br = new BufferedReader(new FileReader("jobs.csv"))) {
	            String line; // Holds each line of the file
	            while ((line = br.readLine()) != null) { // Read each line until end of file
	                String[] parts = line.split(",", 4); // name, description, tools, materials

	                if (parts.length < 4) continue;// Skips lines that don't have all parts

	                Job job = new Job(parts[0], parts[1]);

	                // Tools
	                String[] toolData = parts[2].split("\\|"); // Splitting tools by '|'
	                for (String toolEntry : toolData) {
	                    String[] toolParts = toolEntry.split(":"); // Split tool name and quantity
	                    if (toolParts.length == 2) {
	                        job.addTool(new Tool(toolParts[0], toolParts[1])); // Add tool to job
	                    }
	                }

	                // Materials
	                String[] materialData = parts[3].split("\\|"); // Splitting materials by '|'
	                for (String materialEntry : materialData) {
	                    String[] materialParts = materialEntry.split(":"); // Split material name and quantity
	                    if (materialParts.length == 2) {
	                        job.addMaterial(new Materials(materialParts[0], materialParts[1])); // Add material to job
	                    }
	                }

	                jobList.add(job); // Add job to JobList array
	            }

	            System.out.println("\n***Jobs loaded from file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error loading file: " + e.getMessage() + "***\n"); // Handle read error
	        }
	    }
	    
	    
	    public static void listJobs() throws JobException {
			  if (jobList.isEmpty()) {
			        throw new JobException("\n***No jobs found***\n"); // Throw error if no job exists
			    }

			    for (int i = 0; i < jobList.size(); i++) {
			        System.out.println("==================================="//35
			        		+ "\n---JOB # " + i +"---" + "\n" + jobList.get(i) + // Printing job and the border around the job
			        		"===================================\n");
			    }
	    }
	    
	    // This method saves the jobList array to the CSV file
	    public static void saveToFile() {
	        try (FileWriter writer = new FileWriter("jobs.csv")) {
	            for (Job job : jobList) {
	                StringBuilder line = new StringBuilder();
	                line.append(job.getName()).append(",");
	                line.append(job.getDescription()).append(",");

	                // Tools
	                List<Tool> tools = job.getTools();
	                for (int i = 0; i < tools.size(); i++) {
	                    Tool tool = tools.get(i);
	                    line.append(tool.getName()).append(":").append(tool.getQuantity());
	                    if (i < tools.size() - 1) {
	                        line.append("|");
	                    }
	                }

	                line.append(","); // this comma separates tools from materials

	                // Materials
	                List<Materials> materials = job.getMaterials();
	                for (int i = 0; i < materials.size(); i++) {
	                    Materials material = materials.get(i);
	                    line.append(material.getName()).append(":").append(material.getQuantity());
	                    if (i < materials.size() - 1) {
	                        line.append("|");
	                    }
	                }

	                writer.write(line.toString() + "\n");
	            }

	            System.out.println("\n***Jobs saved to file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error saving file: " + e.getMessage() + "***\n");
	        }
	    }
}